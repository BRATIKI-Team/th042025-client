import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, RouterModule, ParamMap } from '@angular/router';
import { BotService } from '../../services/bot.service';
import { IBotDetail, BotStatus, BotSourceType } from '../../interfaces/bot.interface';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { BotHeaderComponent } from './bot-header/bot-header.component';
import { BotMetricsComponent, BotMetricsData } from './bot-metrics/bot-metrics.component';
import { ActivityChartComponent } from './activity-chart/activity-chart.component';
import { BotSourcesComponent } from './bot-sources/bot-sources.component';

@Component({
  selector: 'app-bot-detail',
  standalone: true,
  imports: [
    CommonModule, 
    RouterModule, 
    BotHeaderComponent, 
    BotMetricsComponent, 
    ActivityChartComponent,
    BotSourcesComponent
  ],
  template: `
    <div class="bot-detail-container" *ngIf="bot">
      <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ—Ç–∞ -->
      <app-bot-header 
        [bot]="bot" 
        [isExpanded]="isTopicExpanded" 
        (expandToggled)="toggleTopicExpanded($event)">
      </app-bot-header>
      
      <!-- –ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞ -->
      <app-bot-metrics [metrics]="botMetrics"></app-bot-metrics>
      
      <!-- –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ -->
      <app-activity-chart 
        [data]="chartData" 
        [selectedRange]="selectedTimeRange">
      </app-activity-chart>
      
      <!-- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö -->
      <app-bot-sources [sources]="bot.sources"></app-bot-sources>
    </div>
    
    <!-- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏ -->
    <div class="empty-state" *ngIf="!bot && !loading">
      <div class="empty-state-content">
        <div class="empty-icon">ü§ñ</div>
        <h2>–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <p>–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω</p>
      </div>
    </div>
    
    <div class="loading-state" *ngIf="loading">
      <div class="loading-spinner"></div>
      <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...</p>
    </div>
  `,
  styleUrls: ['./bot-detail.component.scss']
})
export class BotDetailComponent implements OnInit, OnDestroy {
  bot?: IBotDetail;
  loading = true;
  BotStatus = BotStatus;
  BotSourceType = BotSourceType;
  botId: string = '';
  botMetrics: BotMetricsData = {
    activeUsers: 0,
    growthRate: 0,
    avgMessagesPerUser: 0,
    topSourceCount: 0,
    activityLevel: 'Low',
    userGrowth: 0
  };
  selectedTimeRange: string = '7D';
  isTopicExpanded = false;
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  chartData: Record<string, number[]> = {
    '7D': [],
    '14D': [],
    '30D': []
  };
  
  private destroy$ = new Subject<void>();

  constructor(
    private route: ActivatedRoute,
    private botService: BotService
  ) {}

  ngOnInit(): void {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
    this.route.paramMap
      .pipe(takeUntil(this.destroy$))
      .subscribe((params: ParamMap) => {
        const id = params.get('id');
        if (id) {
          this.botId = id;
          this.loadBot(Number(this.botId));
        }
      });
  }
  
  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  loadBot(id: number): void {
    this.loading = true;
    this.botService.getBotById(id).subscribe(bot => {
      this.bot = bot;
      this.loading = false;
      
      if (bot) {
        this.calculateBotMetrics(bot);
        this.generateChartData(bot);
      }
    });
  }

  calculateBotMetrics(bot: IBotDetail): void {
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–µ
    const metrics: BotMetricsData = {
      activeUsers: bot.users_count,
      growthRate: this.getGrowthRate(),
      avgMessagesPerUser: Math.round(this.getAverageMessages() * 10) / 10,
      topSourceCount: bot.sources.length,
      activityLevel: this.getActivityLevel(),
      userGrowth: Math.round(this.getUserGrowth() * 10) / 10,
      topSource: this.getTopSource(bot)
    };
    
    this.botMetrics = metrics;
  }
  
  generateChartData(bot: IBotDetail): void {
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    this.chartData = {
      '7D': [],
      '14D': [],
      '30D': []
    };
    
    if (!bot.metrics) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø metrics
      if (bot.metrics instanceof Map) {
        // –ï—Å–ª–∏ —ç—Ç–æ Map, –∏—Å–ø–æ–ª—å–∑—É–µ–º entries()
        const allEntries = Array.from(bot.metrics.entries())
          .sort((a, b) => a[0].getTime() - b[0].getTime());
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç—Ä–∏–∫, –≤—ã—Ö–æ–¥–∏–º
        if (allEntries.length === 0) return;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        this.chartData = {
          '7D': this.getChartDataForPeriod(allEntries, 7),
          '14D': this.getChartDataForPeriod(allEntries, 14),
          '30D': this.getChartDataForPeriod(allEntries, 30)
        };
      } else {
        console.error('–¢–∏–ø metrics –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Map');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫:', error);
    }
  }
  
  getChartDataForPeriod(entries: [Date, number][], days: number): number[] {
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π –∏–∑ –º–µ—Ç—Ä–∏–∫
    const recentEntries = entries.slice(-days);
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
    const result: number[] = [];
    
    if (recentEntries.length < days) {
      const missingDays = days - recentEntries.length;
      for (let i = 0; i < missingDays; i++) {
        result.push(0);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    recentEntries.forEach(entry => {
      result.push(entry[1]);
    });
    
    return result;
  }
  
  getTopSource(bot: IBotDetail): string {
    if (!bot.sources || bot.sources.length === 0) return '–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤';
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å "–æ—Å–Ω–æ–≤–Ω–æ–π" –∏—Å—Ç–æ—á–Ω–∏–∫
    // –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ
    return bot.sources[0].name;
  }
  
  getActivityLevel(): string {
    if (!this.bot || !this.bot.metrics || this.bot.metrics.size === 0) return 'Low';
    
    const entries = this.getMetricEntries();
    if (entries.length === 0) return 'Low';
    
    const lastValue = entries[entries.length - 1][1];
    
    if (lastValue > 500) return 'High';
    if (lastValue > 100) return 'Medium';
    return 'Low';
  }
  
  getAverageMessages(): number {
    if (!this.bot || !this.bot.metrics || this.bot.metrics.size === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length === 0) return 0;
    
    const values = entries.map(entry => entry[1]);
    const sum = values.reduce((total, value) => total + value, 0);
    
    return sum / values.length / 10; // –î–µ–ª–∏–º –Ω–∞ 10 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  }
  
  getUserGrowth(): number {
    if (!this.bot || !this.bot.metrics || this.bot.metrics.size === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length < 2) return 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    const first = entries[0][1];
    const last = entries[entries.length - 1][1];
    
    if (first === 0) return 0;
    
    return ((last - first) / first) * 100;
  }
  
  toggleTopicExpanded(expanded?: boolean): void {
    if (expanded !== undefined) {
      this.isTopicExpanded = expanded;
    } else {
      this.isTopicExpanded = !this.isTopicExpanded;
    }
  }

  getMetricEntries(): [Date, number][] {
    if (!this.bot || !this.bot.metrics) return [];
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø metrics
      if (this.bot.metrics instanceof Map) {
        // –ï—Å–ª–∏ —ç—Ç–æ Map, –∏—Å–ø–æ–ª—å–∑—É–µ–º entries()
        return Array.from(this.bot.metrics.entries())
          .sort((a, b) => a[0].getTime() - b[0].getTime())
          .slice(-7);
      } else {
        console.error('–¢–∏–ø metrics –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Map');
        return [];
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫:', error);
      return [];
    }
  }

  getMaxMetricValue(): number {
    if (!this.bot || !this.bot.metrics || this.bot.metrics.size === 0) return 100;
    
    let max = 0;
    
    this.bot.metrics.forEach((value) => {
      if (value > max) max = value;
    });
    
    return max > 0 ? max : 100;
  }

  getGrowthRate(): number {
    if (!this.bot || !this.bot.metrics || this.bot.metrics.size === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length < 2) return 0;
    
    const current = entries[entries.length - 1][1];
    const previous = entries[0][1];
    
    if (previous === 0) return 100;
    
    return Math.round(((current - previous) / previous) * 100);
  }
} 