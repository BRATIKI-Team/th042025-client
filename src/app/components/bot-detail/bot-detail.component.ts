import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, RouterModule, ParamMap } from '@angular/router';
import { BotService } from '../../services/bot.service';
import { IBotDetail, BotStatus, BotSourceType } from '../../interfaces/bot.interface';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { BotHeaderComponent } from './bot-header/bot-header.component';
import { BotMetricsComponent, BotMetricsData } from './bot-metrics/bot-metrics.component';
import { ActivityChartComponent } from './activity-chart/activity-chart.component';
import { BotSourcesComponent } from './bot-sources/bot-sources.component';

@Component({
  selector: 'app-bot-detail',
  standalone: true,
  imports: [
    CommonModule, 
    RouterModule, 
    BotHeaderComponent, 
    BotMetricsComponent, 
    ActivityChartComponent,
    BotSourcesComponent
  ],
  template: `
    <div class="bot-detail-container" *ngIf="bot">
      <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ—Ç–∞ -->
      <app-bot-header 
        [bot]="bot" 
        [isExpanded]="isTopicExpanded" 
        (expandToggled)="toggleTopicExpanded($event)">
      </app-bot-header>
      
      <!-- –ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞ -->
      <app-bot-metrics [metrics]="botMetrics"></app-bot-metrics>
      
      <!-- –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ -->
      <app-activity-chart 
        [data]="chartData" 
        [selectedRange]="selectedTimeRange">
      </app-activity-chart>
      
      <!-- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö -->
      <app-bot-sources [sources]="bot.sources"></app-bot-sources>
    </div>
    
    <!-- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏ -->
    <div class="empty-state" *ngIf="!bot && !loading">
      <div class="empty-state-content">
        <div class="empty-icon">ü§ñ</div>
        <h2>–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <p>–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω</p>
      </div>
    </div>
    
    <div class="loading-state" *ngIf="loading">
      <div class="loading-spinner"></div>
      <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...</p>
    </div>
  `,
  styleUrls: ['./bot-detail.component.scss']
})
export class BotDetailComponent implements OnInit, OnDestroy {
  bot?: IBotDetail;
  loading = true;
  BotStatus = BotStatus;
  BotSourceType = BotSourceType;
  botId: string = '';
  botMetrics: BotMetricsData = {
    activeUsers: 0,
    growthRate: 0,
    avgMessagesPerUser: 0,
    topSourceCount: 0,
    activityLevel: 'Low',
    userGrowth: 0
  };
  selectedTimeRange: string = '7D';
  isTopicExpanded = false;
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  chartData: Record<string, number[]> = {
    '7D': [],
    '14D': [],
    '30D': []
  };
  
  private destroy$ = new Subject<void>();

  constructor(
    private route: ActivatedRoute,
    private botService: BotService
  ) {}

  ngOnInit(): void {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
    this.route.paramMap
      .pipe(takeUntil(this.destroy$))
      .subscribe((params: ParamMap) => {
        const id = params.get('id');
        if (id) {
          this.botId = id;
          this.loadBot(Number(this.botId));
        }
      });
  }
  
  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  loadBot(id: number): void {
    this.loading = true;
    this.botService.getBotById(id).subscribe(bot => {
      this.bot = bot;
      this.loading = false;
      
      if (bot) {
        this.calculateBotMetrics(bot);
        this.generateChartData(bot);
      }
    });
  }

  calculateBotMetrics(bot: IBotDetail): void {
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–µ
    const metrics: BotMetricsData = {
      activeUsers: bot.users_count,
      growthRate: this.getGrowthRate(),
      avgMessagesPerUser: Math.round(this.getAverageMessages() * 10) / 10,
      topSourceCount: bot.sources.length,
      activityLevel: this.getActivityLevel(),
      userGrowth: Math.round(this.getUserGrowth() * 10) / 10,
      topSource: this.getTopSource(bot)
    };
    
    this.botMetrics = metrics;
  }
  
  generateChartData(bot: IBotDetail): void {
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    this.chartData = {
      '7D': [],
      '14D': [],
      '30D': []
    };
    
    if (!bot.metrics || Object.keys(bot.metrics).length === 0) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
      const allEntries = this.getMetricEntries();
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç—Ä–∏–∫, –≤—ã—Ö–æ–¥–∏–º
      if (allEntries.length === 0) return;
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
      this.chartData = {
        '7D': this.getChartDataForPeriod(allEntries, 7),
        '14D': this.getChartDataForPeriod(allEntries, 14),
        '30D': this.getChartDataForPeriod(allEntries, 30)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫:', error);
    }
  }
  
  getChartDataForPeriod(entries: [Date, number][], days: number): number[] {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π
    const result: number[] = new Array(days).fill(0);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π
    if (entries.length === 0) return result;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ —Å–µ–≥–æ–¥–Ω—è)
    const latestDate = new Date(Math.max(...entries.map(e => e[0].getTime())));
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    entries.forEach(([date, value]) => {
      // –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
      const diffDays = Math.floor((latestDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
      
      // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–µ—Ä–∏–æ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      if (diffDays < days) {
        const index = days - diffDays - 1;
        result[index] = value;
      }
    });
    
    return result;
  }
  
  getTopSource(bot: IBotDetail): string {
    if (!bot.sources || bot.sources.length === 0) return '–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤';
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å "–æ—Å–Ω–æ–≤–Ω–æ–π" –∏—Å—Ç–æ—á–Ω–∏–∫
    // –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ
    return bot.sources[0].name;
  }
  
  getActivityLevel(): string {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 'Low';
    
    const entries = this.getMetricEntries();
    if (entries.length === 0) return 'Low';
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    const sum = entries.reduce((total, entry) => total + entry[1], 0);
    const avg = sum / entries.length;
    
    if (avg > 500) return 'High';
    if (avg > 100) return 'Medium';
    return 'Low';
  }
  
  getAverageMessages(): number {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length === 0) return 0;
    
    const values = entries.map(entry => entry[1]);
    const sum = values.reduce((total, value) => total + value, 0);
    
    return sum / values.length / 10; // –î–µ–ª–∏–º –Ω–∞ 10 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  }
  
  getUserGrowth(): number {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length < 2) return 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    const first = entries[0][1];
    const last = entries[entries.length - 1][1];
    
    if (first === 0) return 0;
    
    return ((last - first) / first) * 100;
  }
  
  toggleTopicExpanded(expanded?: boolean): void {
    if (expanded !== undefined) {
      this.isTopicExpanded = expanded;
    } else {
      this.isTopicExpanded = !this.isTopicExpanded;
    }
  }

  getMetricEntries(): [Date, number][] {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      const today = new Date();
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ –ø–æ –¥–Ω—è–º
      const dailyMetrics: Map<string, number> = new Map();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç metrics –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
      Object.entries(this.bot.metrics).forEach(([dateStr, value]) => {
        const date = new Date(dateStr);
        const dateKey = date.toISOString().split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
        if (dailyMetrics.has(dateKey)) {
          dailyMetrics.set(dateKey, dailyMetrics.get(dateKey)! + value);
        } else {
          dailyMetrics.set(dateKey, value);
        }
      });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –ø–∞—Ä [Date, number]
      const entries: [Date, number][] = Array.from(dailyMetrics.entries())
        .map(([dateStr, value]) => {
          return [new Date(dateStr), value] as [Date, number];
        })
        .sort((a, b) => a[0].getTime() - b[0].getTime());
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const sevenDaysAgo = new Date(today);
      sevenDaysAgo.setDate(today.getDate() - 7);
      
      const recentEntries = entries.filter(entry => entry[0] >= sevenDaysAgo);
      
      return recentEntries.length > 0 ? recentEntries : entries.slice(-7);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫:', error);
      return [];
    }
  }

  getLastMetricValue(): number {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 0;
    
    const entries = this.getMetricEntries();
    return entries.length > 0 ? entries[entries.length - 1][1] : 0;
  }

  getMetricAverage(): number {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length === 0) return 0;
    
    const sum = entries.reduce((total, entry) => total + entry[1], 0);
    return Math.round(sum / entries.length);
  }

  getMaxMetricValue(): number {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 100;
    
    const entries = this.getMetricEntries();
    if (entries.length === 0) return 100;
    
    const max = Math.max(...entries.map(entry => entry[1]));
    return max > 0 ? max : 100;
  }

  getGrowthRate(): number {
    if (!this.bot || !this.bot.metrics || Object.keys(this.bot.metrics).length === 0) return 0;
    
    const entries = this.getMetricEntries();
    if (entries.length < 2) return 0;
    
    const current = entries[entries.length - 1][1];
    const previous = entries[0][1];
    
    if (previous === 0) return 0;
    
    return Math.round(((current - previous) / previous) * 100);
  }
} 